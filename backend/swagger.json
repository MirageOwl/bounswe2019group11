{
  "swagger": "2.0",
  "info": {
    "description": "API documentation for the backend service",
    "version": "1.0.0",
    "title": "Papel Backend"
  },
  "host": "papel-dev.herokuapp.com",
  "basePath": "/",
  "tags": [
    {
      "name": "auth",
      "description": "Authentication endpoints"
    },
    {
      "name": "stock",
      "description": "Stock fetch endpoints"
    },
    {
      "name": "profile",
      "description": "Profile related endpoints"
    },
    {
      "name": "event",
      "description": "Event fetch endpoints"
    },
    {
      "name": "article",
      "description": "Article fetch endpoints"
    },
    {
      "name": "portfolio",
      "description": "Portfolio create-fetch-update endpoints"
    }
  ],
  "schemes": [
    "http",
    "https"
  ],
  "paths": {
    "/auth/sign-up": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Sign up endpoint for the Papel.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "user",
            "description": "The user to sign up.",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK. Successfully signed up. A verification email is sent."
          },
          "400": {
            "description": "Validation error occurred for one of the parameters. Check the name and message fields for diagnostics."
          },
          "500": {
            "description": "Internal error occurred. Check the cause field for the diagnostics."
          }
        }
      }
    },
    "/auth/sign-up/verification/{token}": {
      "get": {
        "tags": [
          "auth"
        ],
        "summary": "Email verification endpoint.",
        "produces": [
          "application/text",
          "application/json"
        ],
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "description": "Verification token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. User successfully validated."
          },
          "400": {
            "description": "Validation error occurred for one of the parameters. Check the name and message fields for diagnostics."
          },
          "500": {
            "description": "Internal error occurred. Check the cause field for the diagnostics."
          }
        }
      }
    },
    "/auth/sign-up/verification/resend": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Email verification resend endpoint.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "email",
            "description": "Email of the user.",
            "schema": {
              "type": "object",
              "required": [
                "email"
              ],
              "properties": {
                "email": {
                  "type": "string",
                  "description": "Email of the user.",
                  "example": "john@doe.com"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK. Verification email successfully resent."
          },
          "400": {
            "description": "Either a user not found with the given email or the user already verified."
          },
          "500": {
            "description": "Internal error occurred. Check the cause field for the diagnostics."
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Login endpoint.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "credentials",
            "description": "The user credentials to login.",
            "schema": {
              "type": "object",
              "required": [
                "email",
                "password"
              ],
              "properties": {
                "email": {
                  "type": "string",
                  "description": "Email of the user.",
                  "example": "johndoe@gmail.com"
                },
                "password": {
                  "type": "string",
                  "description": "Password of the user.",
                  "example": "strongPa$.$word"
                }
              }
            }
          }
        ],
        "responses": {
          "200":{
            "description": "OK. User successfully logged in. User object and JWT token is returned."
          },
          "401": {
            "description": "Invalid credentials. Either the user with the given email does not exists or the password does not matches the password for the given email."
          },
          "500": {
            "description": "Internal error occurred. Check the cause field for the diagnostics."
          }
        }
      }
    },
    "/stock": {
      "get": {
        "tags": [
          "stock"
        ],
        "summary": "Stock(Trading Equipment) get all endpoint.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],

        "responses": {
          "200":{
            "description": "OK. All Stocks returned succesfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Stock"
              }
            }
          },
          "503": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/stock/{_id}": {
      "get": {
        "tags": [
          "stock"
        ],
        "summary": "Returns requested stock with historical data",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "description": "Unique Stock ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200":{
            "description": "OK. All Stocks returned succesfully.",
            "schema": {
              "$ref": "#/definitions/StockDetail"
            }
          },
          "503": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/profile/lost-password": {
      "post": {
        "tags": [
          "profile"
        ],
        "summary": "Lost password endpoint.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "email",
            "description": "Email of the password who lost his password.",
            "schema": {
              "type": "object",
              "required": [
                "email"
              ],
              "properties": {
                "email": {
                  "type": "string",
                  "description": "Email of the password who lost his password.",
                  "example": "john@doe.com"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK. An email that contains instruction about how the user can reset his password is sent."
          },
          "400": {
            "description": "User with the given email not found."
          },
          "500": {
            "description": "Internal error occurred. Check the cause field for the diagnostics."
          }
        }
      }
    },
    "/profile/lost-password/reset": {
      "post": {
        "tags": [
          "profile"
        ],
        "summary": "Password reset endpoint.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "Token and password",
            "description": "Lost password verification token and new password of the user.",
            "schema": {
              "type": "object",
              "required": [
                "token",
                "password"
              ],
              "properties": {
                "token": {
                  "type": "string",
                  "description": "Lost password token.",
                  "example": "6b4c4760efb1f1a4115f391fec2f89das5dcd7ce9448464747f6f936eea4caed"
                },
                "password": {
                  "type": "string",
                  "description": "New password of the user.",
                  "example": "new#pas$word"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK. Credentials are updated with the new password."
          },
          "400": {
            "description": "Given lost password token is expired, invalid or the password is too short."
          },
          "500": {
            "description": "Internal error occurred. Check the cause field for the diagnostics."
          }
        }
      }
    },
    "/portfolio": {
      "get": {
        "tags": [
          "portfolio"
        ],
        "summary": "Portfolio get all endpoint.(Actually its unnecessary but still it can be useful for development)",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],

        "responses": {
          "200":{
            "description": "OK. All Stocks returned succesfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Portfolio"
              }
            }
          },
          "503": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "portfolio"
        ],
        "summary": "Create portfolio endpoint",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "portfolio",
            "description": "The portfolio to create",
            "schema": {
              "type": "object",
              "required": ["name", "userId"],
              "properties": {
                "name":{
                  "type": "string",
                  "description": "Name of the Portfolio",
                  "example": "My Portfolio"
                },
                "userId":{
                  "type": "string",
                  "description": "User ID of the portfolio",
                  "example": "5da076d955d9b93a7308f3d7"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK. The portfolio created successfully",
            "schema": {
              "$ref": "#/definitions/Portfolio"
            }
          },
          "503": {
            "description": "Internal error occurred."
          }
        }
      }
    },
    "/portfolio/{portfolioId}": {
      "get": {
        "tags": [
          "portfolio"
        ],
        "summary": "Portfolio get all endpoint.(Actually its unnecessary but still it can be useful for development)",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "portfolioId",
            "in": "path",
            "description": "Portfolio ID",
            "required": true,
            "type": "string"
          }
        ],

        "responses": {
          "200":{
            "description": "OK. All Stocks returned successfully.",
            "schema": {
              "$ref": "#/definitions/Portfolio"
            }
          },
          "503": {
            "description": "Internal Server Error"
          }
        }

      }

    },
    "/portfolio/{_id}/stock": {
      "post": {
        "tags": [
          "portfolio"
        ],
        "summary": "Add the stock to addressed portfolio /portfolio/:id describes the portfolio and /stock describes that request body should be a stock ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "stock",
            "description": "Add a stock to specific portfolio",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/Stock"
            }
          },
          {
            "name": "portfolioId",
            "in": "path",
            "description": "Portfolio ID",
            "required": true,
            "type": "string"
          }

        ],
        "responses": {
          "200": {
            "description": "OK. The portfolio created successfully",
            "schema": {
              "$ref": "#/definitions/Portfolio"
            }
          },
          "503": {
            "description": "Internal error occurred."
          }
        }
      },
      "delete": {
        "tags": [
          "portfolio"
        ],
        "summary": "Delete the stock to addressed portfolio /portfolio/:id describes the portfolio and /stock describes that request body should be a stock ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "stock",
            "description": "Delete the specific stock from specific portfolio Note: _id field should be provided it is required",
            "schema": {
              "type": "object",
              "required": ["_id"],
              "$ref": "#/definitions/Stock"
            }
          },
          {
            "name": "portfolioId",
            "in": "path",
            "description": "Portfolio ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. The portfolio deleted successfully, Actually it should be No Content but for updating the portfolio immediately the endpoint sends the updated portfolio ",
            "schema": {
              "$ref": "#/definitions/Portfolio"
            }
          },
          "503": {
            "description": "Internal error occurred."
          }
        }
      }
    },
    "/portfolio/user/{userId}": {
      "get": {
        "tags": [
          "portfolio"
        ],
        "summary": "Returns all portfolios of the specific user.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. The portfolios sent successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Portfolio"
              }
            }
          },
          "503": {
            "description": "Internal error occurred."
          }
        }
      }
    },
    "/article": {
      "get": {
        "tags": [
          "article"
        ],
        "summary": "Article get all endpoint.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],

        "responses": {
          "200":{
            "description": "OK. All articles returned succesfully.",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties":  {
                  "title":{
                    "type": "string",
                    "description": "Title of the article",
                    "example": "Low-Cost Investing Can’t Get Any Lower Than Free"
                  },
                  "body":{
                    "type": "string",
                    "description": "Body part of the article",
                    "example": "The central bank cut rates for the first time since the Great Recession in late July..."
                  },
                  "comment":{
                    "type":"array",
                    "description": "Comments made on the article",
                    "example": ["Nice!","Thank you."]
                  },
                  "authorId":{
                    "type":"string",
                    "description": "User ID of the article's author.",
                    "example": "5da07611e407903a5d01b265"
                  },
                  "rank":{
                    "type": "Number",
                    "description": "User ID of the article's author.",
                    "example": "3.4"
                  },
                  "voterNumber":{
                    "type": "Number",
                    "description": "Number of users that ranked the article.",
                    "example": "72"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/event": {
      "get": {
        "tags": [
          "event" ],
        "summary": "Event get all endpoint.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],

        "responses": {
          "200":{
            "description": "OK. All Events returned succesfully.",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties":  {
                  "title":{
                    "type": "string",
                    "description": "Title of the event",
                    "example": "title"
                  },
                  "body":{
                    "type": "string",
                    "description": "Event body",
                    "example": "272.7 example"
                  },
                  "comment":{
                    "type": "array",
                    "description": "Comments of the event",
                    "example": ["comment2","comment2"]
                  },
                  "date":{
                    "type": "date",
                    "description": "Start day of the event"
                  },
                  "rank":{
                    "type": "number",
                    "description": "Rank of the event",
                    "example": 3
                  },
                  "country":{
                    "type": "string",
                    "description": "Country of the event",
                    "example": "Turkey"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/event/{_id}": {
      "get": {
        "tags": [
          "event"
        ],
        "summary": "Returns requested event with historical data",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "description": "Unique event ID",
            "required": true,
            "type": "string"
          }
        ],

        "responses": {
          "200":{
            "description": "OK. Event returned succesfully.",
            "schema": {
              "type": "object",
              "properties":  {
                "title":{
                  "type": "string",
                  "description": "Title of the event",
                  "example": "title"
                },
                "body":{
                  "type": "string",
                  "description": "Event body",
                  "example": "272.7 example"
                },
                "comment":{
                  "type": "array",
                  "description": "Comments of the event",
                  "example": ["comment2","comment2"]
                },
                "date":{
                  "type": "date",
                  "description": "Start day of the event"
                },
                "rank":{
                  "type": "number",
                  "description": "Rank of the event",
                  "example": 3
                },
                "country":{
                  "type": "string",
                  "description": "Country of the event",
                  "example": "Turkey"
                }
              }
            }

          }
        }
      }
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "required": [
        "name",
        "surname",
        "email",
        "password"
      ],
      "properties": {
        "_id": {
          "type": "string",
          "description": "Unique id of the user (it is created by database so when create a user this field should not provided by the client side )"
        },
        "name": {
          "type": "string",
          "description": "Name of the user.",
          "example": "John"
        },
        "surname": {
          "type": "string",
          "description": "Surname of the user.",
          "example": "Doe"
        },
        "email": {
          "type": "string",
          "description": "Email of the user.",
          "example": "johndoe@gmail.com"
        },
        "password": {
          "type": "string",
          "description": "Password of the user.",
          "example": "strongPa$.$word"
        },
        "idNumber": {
          "type": "string",
          "description": "ID number of the user.",
          "example": "12345678910"
        },
        "iban": {
          "type": "string",
          "description": "IBAN number of the user.",
          "example": "TR33 0006 1005 1978 6457 8413 26"
        },
        "location": {
          "type": "object",
          "properties": {
            "latitude": {
              "type": "number",
              "description": "Latitude of the location.",
              "example": 41.085987
            },
            "longitude": {
              "type": "number",
              "description": "Longitude of the location.",
              "example": 29.044008
            }
          }
        }
      }
    },
    "Portfolio": {
      "type": "object",
      "properties":  {
        "_id": {
          "type": "string",
          "description": "Unique id of the portfolio (it is created by database so when create a portfolio this field should not provided by the client side )"
        },
        "name":{
          "type": "string",
          "description": "Name of the Portfolio",
          "example": "My Portfolio"
        },
        "userId":{
          "type": "string",
          "description": "User ID of the portfolio",
          "example": "5da076d955d9b93a7308f3d7"
        },
        "stocks":{
          "type":"array",
          "items": {
            "$ref": "#/definitions/Stock"
          }
        }
      }
    },
    "Stock": {
      "type": "object",
      "properties":  {
        "_id": {
          "type": "string",
          "description": "Unique id of the stock (it is created by database so when create a stock this field should not provided by the client side )"
        },
        "name":{
          "type": "string",
          "description": "Include both symbol and name of the stock (useful for searching)",
          "example": "ADBE - Adobe Inc. - Common Stock"
        },
        "price":{
          "type": "number",
          "description": "Current price of the stock",
          "example": 272.7
        },
        "stockSymbol":{
          "type":"string",
          "description": "Official Symbol of the Stock",
          "example": "ADBE"
        },
        "stockName":{
          "type":"string",
          "description": "Name of the Stock without abbr",
          "example": "Adobe Inc. - Common Stock"
        }
      }
    },
    "StockDetail": {
      "type": "object",
      "properties":  {
        "_id": {
          "type": "string",
          "description": "Unique id of the stock"
        },
        "name":{
          "type": "string",
          "description": "Include both symbol and name of the stock (useful for searching)",
          "example": "ADBE - Adobe Inc. - Common Stock"
        },
        "price":{
          "type": "number",
          "description": "Current price of the stock",
          "example": 272.7
        },

        "monthlyPrice":{
          "type": "object",
          "description": "Historical data day by day ",
          "example": "\"2019-10-16\": {\n            \"1. open\": \"270.2300\",\n            \"2. high\": \"272.8100\",\n            \"3. low\": \"267.5200\",\n            \"4. close\": \"272.7000\",\n            \"5. volume\": \"3860465\"\n        },\n        \"2019-10-15\": {\n            \"1. open\": \"278.1700\",\n            \"2. high\": \"281.5100\",\n            \"3. low\": \"278.0200\",\n            \"4. close\": \"279.3900\",\n            \"5. volume\": \"1964000\"\n        },\n        \"2019-10-14\": {\n            \"1. open\": \"278.1100\",\n            \"2. high\": \"279.4200\",\n            \"3. low\": \"277.1500\",\n            \"4. close\": \"277.7800\",\n            \"5. volume\": \"1372600\"\n        }"
        },
        "dailyPrice": {
          "type": "object",
          "description": "Historical data in a day with 5 mins interval",
          "example": "\"2019-10-16 16:00:00\": {\n            \"1. open\": \"272.7000\",\n            \"2. high\": \"272.8300\",\n            \"3. low\": \"272.4600\",\n            \"4. close\": \"272.7900\",\n            \"5. volume\": \"161462\"\n        },\n        \"2019-10-16 15:55:00\": {\n            \"1. open\": \"272.6888\",\n            \"2. high\": \"273.0154\",\n            \"3. low\": \"272.6650\",\n            \"4. close\": \"272.6688\",\n            \"5. volume\": \"70732\"\n        },\n        \"2019-10-16 15:50:00\": {\n            \"1. open\": \"272.3350\",\n            \"2. high\": \"272.7500\",\n            \"3. low\": \"272.2300\",\n            \"4. close\": \"272.7000\",\n            \"5. volume\": \"65368\"\n        },\n        \"2019-10-16 15:45:00\": {\n            \"1. open\": \"272.6100\",\n            \"2. high\": \"272.6950\",\n            \"3. low\": \"272.3100\",\n            \"4. close\": \"272.3400\",\n            \"5. volume\": \"63315\"\n        }"
        },
        "stockSymbol":{
          "type":"string",
          "description": "Official Symbol of the Stock",
          "example": "ADBE"
        },
        "stockName":{
          "type":"string",
          "description": "Name of the Stock without abbr",
          "example": "Adobe Inc. - Common Stock"
        }
      }

    }
  }
}
